name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      run: dotnet restore ContinuousIntegration.slnx

    - name: Build
      run: dotnet build ContinuousIntegration.slnx --configuration Release --no-restore

    - name: Test with coverage
      shell: bash
      run: |
        dotnet test ContinuousIntegration.slnx \
          --configuration Release \
          --no-build \
          --verbosity normal \
          --collect:"XPlat Code Coverage" \
          --results-directory ./coverage

    - name: Install ReportGenerator
      shell: bash
      run: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        # garante que o 'reportgenerator' esteja no PATH
        echo "$HOME/.dotnet/tools" >> "$GITHUB_PATH"

    - name: Check coverage threshold (95%)
      shell: bash
      run: |
        reportgenerator \
          -reports:"./coverage/**/coverage.cobertura.xml" \
          -targetdir:"./coverage/temp" \
          -reporttypes:"TextSummary"

        echo "üìã Coverage Summary:"
        cat ./coverage/temp/Summary.txt

        COVERAGE=$(grep -oE "Line coverage: [0-9.]+" ./coverage/temp/Summary.txt | grep -oE "[0-9.]+" | head -1)
        if [ -z "$COVERAGE" ]; then
          echo "‚ùå N√£o foi poss√≠vel determinar a cobertura de linha"
          exit 1
        fi

        echo "üìä Cobertura encontrada: ${COVERAGE}%"
        COV_INT=${COVERAGE%.*}
        THRESHOLD=60

        if [ "$COV_INT" -lt "$THRESHOLD" ]; then
          echo "‚ùå Cobertura ${COVERAGE}% est√° abaixo do m√≠nimo exigido ${THRESHOLD}%"
          exit 1
        else
          echo "‚úÖ Cobertura ${COVERAGE}% atende ao m√≠nimo de ${THRESHOLD}%"
        fi
